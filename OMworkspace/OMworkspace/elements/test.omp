; OM File Header - Saved 2012/06/18 18:40:14
; (6.050003 :patc (om-make-point 10 60) (om-make-point 255 29) (om-make-point 500 400) "" 183 0 "2012/01/18 11:30:00" "2012/01/18 11:42:30")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "test" (quote ((om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 99 219) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "eval this first" (om-load-lisp-abspatch "eval this first" 6.050003 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction 5\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (inList) $$(print (first inList))$$(print (second inList))$$)") (quote ((om-load-inputfun (quote input-funbox) "" "INLIST" nil))) (om-make-point 101 272) nil nil nil "eval this first") (om-load-boxcall (quote abstraction) "use both same output" (om-load-lisp-abspatch "use both same output" 6.050003 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction 2\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (in) $$(print in)$$)") (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 164 121) nil nil nil "use both same output") (om-load-boxcall (quote abstraction) "then eval this" (om-load-lisp-abspatch "then eval this" 6.050003 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction 4\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda () $$(print test)$$)") (quote nil) (om-make-point 301 75) nil nil nil "then eval this") (om-load-boxcall (quote abstraction) "use both same output" (om-load-lisp-abspatch "use both same output" 6.050003 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction 2\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (in) $$(print in)$$)") (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 22 119) nil nil nil "use both same output") (om-load-boxcall (quote abstraction) "create random value with setq" (om-load-lisp-abspatch "create random value with setq" 6.050003 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda () $$(setq test (random 100))$$;(let test (random 100))$$)") (quote nil) (om-make-point 72 21) nil nil "&" "create random value with setq"))) (quote ((4 0 0 0 nil 0) (2 0 0 1 nil 0) (0 0 1 0 nil 0) (5 0 2 0 nil 0) (5 0 4 0 nil 0))) nil 6.050003))
