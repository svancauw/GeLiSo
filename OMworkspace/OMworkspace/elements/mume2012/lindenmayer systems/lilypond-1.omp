; OM File Header - Saved 2012/07/05 17:47:53
; (6.050003 :patc (om-make-point 60 72) (om-make-point 0 0) (om-make-point 1280 756) "" 183 0 nil "2012/07/05 17:47:53")
; End File Header
(in-package :om)(load-lib-for (quote ("omlily")))(setf *om-current-persistent* (om-load-patch1 "lilypond-1" (quote ((om-load-boxcall (quote genfun) "OM->LILY" (quote om->lily) (quote ((om-load-inputfun (quote input-funbox) "self" "SELF" (quote t)))) (om-make-point 53 833) nil nil nil nil 1) (om-load-boxcall (quote genfun) "GROUP-IDENTICAL" (quote group-identical) (quote ((om-load-inputfun (quote input-funbox) "liste" "LISTE" (list 1 2)))) (om-make-point 46 435) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 76 680) (om-make-point 370 117) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (7200) (7200) (6700 7000 7200) (6700 7000) (7200) (6700 7200) (6400 6700 7200) (6400 7200) (6700 7000 7200) (6700 7000 7200) (7200) (6700) (6500 6700 7200) (6500 7200) (6500 6700 7000 7200) (6500 6700 7000 7200) (7200) (7200) (7200) (7000 7200) (7000 7200) (6600 6700 7200) (6700 7200) (7200) (7000 7200) (6700 7000) (7200) (7200) (7200) (7200) (7200))) :lonset (quote (22500 23000 24000 24500 25000 25500 26000 26500 27000 27500 28000 28500 29000 29500 30000 30500 31000 31500 32000 32500 33500 34000 34500 35000 36000 36500 37000 38500 39000 41000 41500 43500 45500)) :ldur (quote ((1000) (1000) (1000) (1000 1000 1000) (1000 1000) (1000) (1000 1000) (1000 1000 1000) (1000 1000) (1000 1000 1000) (1000 1000 1000) (1000) (1000) (1000 1000 1000) (1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000) (1000) (1000) (1000 1000) (1000 1000) (1000 1000 1000) (1000 1000) (1000) (1000 1000) (1000 1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100 100 100) (100 100) (100) (100 100) (100 100 100) (100 100) (100 100 100) (100 100 100) (100) (100) (100 100 100) (100 100) (100 100 100 100) (100 100 100 100) (100) (100) (100) (100 100) (100 100) (100 100 100) (100 100) (100) (100 100) (100 100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0 0 0) (0 0) (0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0) (0) (0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0) (0) (0) (0 0) (0 0) (0 0 0) (0 0) (0) (0 0) (0 0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1 1 1) (1 1) (1) (1 1) (1 1 1) (1 1) (1 1 1) (1 1 1) (1) (1) (1 1 1) (1 1) (1 1 1 1) (1 1 1 1) (1) (1) (1) (1 1) (1 1) (1 1 1) (1 1) (1) (1 1) (1 1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0 0 0) (0 0) (0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0) (0) (0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0) (0) (0) (0 0) (0 0) (0 0 0) (0 0) (0) (0 0) (0 0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 87 396) (om-make-point 1280 752) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote lispfun) "FLAT-LOW" (quote flat-low) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 246 612) nil nil nil nil 1) (om-load-boxcall (quote genfun) "GROUP-LIST" (quote group-list) (quote ((om-load-inputfun (quote input-funbox) "list to group" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "list of group lengths" "SEGMENTATION" (list 1 3)) (om-load-inputfunmenu1 (quote input-funmenu) "normal or circular" "MODE" (quote linear) (list (list "linear" (quote (quote linear))) (list "circular" (quote (quote circular))))))) (om-make-point 230 522) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 28 521) (om-make-point 32 30) (quote car) "car" nil) (om-load-boxcall (quote lispfun) "MAPCAR 3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" (quote car)) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 57 556) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 107 530) (om-make-point 49 30) (quote length) "length" nil) (om-load-boxcall (quote lispfun) "MAPCAR 3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 147 561) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 69 31) (quote "ordered") "" (om-make-point 364 291) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 230 404) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 191 372) (om-make-point 54 30) (quote second) "second" nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 93 344) (om-make-point 36 30) (quote first) "first" nil) (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 125 395) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 282 220) (om-make-point 36 30) (quote first) "first" nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 226 219) (om-make-point 23 30) (quote <) "<" nil) (om-load-boxcall (quote genfun) "SORT." (quote sort.) (quote ((om-load-inputfun (quote input-funbox) "the list" "LST" nil) (om-load-inputfun (quote input-funbox) "test" "TEST" (quote <)) (om-load-inputfun (quote input-funbox) "key" "KEY" nil))) (om-make-point 121 276) (om-make-point 237 59) nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 74 161) (om-make-point 30 30) (quote list) "list" nil) (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 111 201) (om-make-point 85 43) nil nil nil 1))) (quote ((2 0 0 0 nil 0) (13 0 1 0 nil 0) (3 0 2 1 nil 0) (6 0 2 2 nil 0) (4 0 3 0 nil 0) (10 0 4 0 nil 0) (8 0 4 1 nil 0) (5 0 6 0 nil 0) (1 0 6 1 nil 0) (7 0 8 0 nil 0) (1 0 8 1 nil 0) (11 0 10 0 nil 0) (16 0 10 1 nil 0) (12 0 13 0 nil 0) (16 0 13 1 nil 0) (18 0 16 0 nil 0) (15 0 16 1 nil 0) (14 0 16 2 nil 0) (17 0 18 0 nil 0))) nil 6.050003))
