; OM File Header - Saved 2012/09/04 14:48:51
; (6.050003 :patc (om-make-point 10 110) (om-make-point 0 -778) (om-make-point 1280 752) "" 183 0 "2012/04/23 10:58:28" "2012/04/25 16:45:30")
; End File Header
; External resources 
; (list (list (quote :abstraction) "c++ solution checker.omp"))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "checker" (quote ((om-load-boxcall (quote patch-box) "c++ solution checker 6" (quote ("elements" "CP2012_MIDI" "c++ solution checker")) (quote ((om-load-inputfun (quote input-funbox) "" "input" (list (list 19 23 17) (list 21 23 17) (list 37 19 17) (list 47 18 17))))) (om-make-point 788 86) nil nil nil nil 1) (om-load-boxcall (quote patch-box) "c++ solution checker 5" (quote ("elements" "CP2012_MIDI" "c++ solution checker")) (quote ((om-load-inputfun (quote input-funbox) "" "input" (list (list 18 23 14) (list 16 23 14) (list 34 19 14) (list 44 18 14))))) (om-make-point 642 86) nil nil nil nil 1) (om-load-boxcall (quote patch-box) "c++ solution checker 4" (quote ("elements" "CP2012_MIDI" "c++ solution checker")) (quote ((om-load-inputfun (quote input-funbox) "" "input" (list (list 15 23 11) (list 13 23 11) (list 31 19 11) (list 41 18 11))))) (om-make-point 505 81) nil nil nil nil 1) (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 296 387) (om-make-point 130 65) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6900) (7300) (7300))) :lonset (quote (15000 10000 2000 1000 18500)) :ldur (quote ((1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6900) (7300) (7300))) :lonset (quote (16500 11500 3500 2500 18500)) :ldur (quote ((1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6900) (7300) (7300))) :lonset (quote (18000 13000 4000 5000 18500)) :ldur (quote ((1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6900) (7300) (7300))) :lonset (quote (20500 15500 6500 7500 18500)) :ldur (quote ((1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6900) (7300) (7300))) :lonset (quote (22000 17000 8000 9000 18500)) :ldur (quote ((1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6900) (7300) (7300))) :lonset (quote (23500 18500 10500 9500 18500)) :ldur (quote ((1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0)) ((0) (0) (0) (0)) ((0) (0) (0) (0)) ((0) (0) (0) (0)) ((0) (0) (0) (0)) ((0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.050003 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 0 -778) (om-make-point 1280 752) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g) (quote g) (quote g) (quote g) (quote g)) 24 2)) nil nil nil nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 285 228) nil nil nil nil 1) (om-load-boxcall (quote patch-box) "c++ solution checker 3" (quote ("elements" "CP2012_MIDI" "c++ solution checker")) (quote ((om-load-inputfun (quote input-funbox) "" "input" (list (list 10 23 6) (list 8 23 6) (list 26 19 6) (list 36 18 6))))) (om-make-point 360 78) nil nil nil nil 1) (om-load-boxcall (quote patch-box) "c++ solution checker 2" (quote ("elements" "CP2012_MIDI" "c++ solution checker")) (quote ((om-load-inputfun (quote input-funbox) "" "input" (list (list 5 23 3) (list 7 23 3) (list 23 19 3) (list 33 18 3))))) (om-make-point 213 77) nil nil nil nil 1) (om-load-boxcall (quote patch-box) "c++ solution checker" (quote ("elements" "CP2012_MIDI" "c++ solution checker")) (quote ((om-load-inputfun (quote input-funbox) "" "input" (list (list 2 23 0) (list 4 23 0) (list 20 19 0) (list 30 18 0))))) (om-make-point 68 77) nil nil nil nil 1))) (quote ((4 0 3 1 nil 0) (7 0 4 0 nil 0) (6 0 4 1 nil 0) (5 0 4 2 nil 0) (2 0 4 3 nil 0) (1 0 4 4 nil 0) (0 0 4 5 nil 0))) nil 6.050003))
