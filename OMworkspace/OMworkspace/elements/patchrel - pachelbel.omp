; OM File Header - Saved 2012/02/15 18:31:52
; (6.050003 :patc (om-make-point 10 10) (om-make-point -12 0) (om-make-point 640 752) "" 183 0 "2012/01/06 16:37:12" "2012/02/11 17:34:30")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "patchrel - pachelbel" (quote ((om-load-boxcall (quote abstraction) "easyproblem pachelbel intersect" (om-load-lisp-abspatch "easyproblem pachelbel intersect" 6.050003 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (gm pachScore)$$;space$(setq sp (newSpace gm))$$;ground relations$(setq glb (newGRelation gm 3))$(setq lubAndTuple (createBoundedFullGroundRelation gm '(60 78 1 10 1 4))) $(setq lub (first lubAndTuple))$$;variable$(setq var (newCPRelVar gm sp glb lub))$(setq grPach (newCPRelVar gm sp pachScore pachScore))$$;equal constraint$(equalConstraint gm sp var grPach)$$;branching$(branch gm sp var)$(branch gm sp grPach)$$;search engine dfs$(setq se (newSearchEngine gm sp 0))$$;get a solution$(setq sol1 (nextSolution gm sp se))$$(print sol1)$$(if (string/= sol1 \"0\");if there is a solution$    ;then$    ;get a var from the solution space$    (setq solRel (getVarInSpace gm sol1 var)) $    ;else$    (setq solRel nil)$) $$$$$;print the solution variable$;(print solRel)$$$)") (quote ((om-load-inputfun (quote input-funbox) "" "GM" nil) (om-load-inputfun (quote input-funbox) "" "PACHSCORE" nil))) (om-make-point 445 130) nil nil "&" "easyproblem pachelbel intersect") (om-load-boxcall (quote abstraction) "create pachelbel" (om-load-lisp-abspatch "create pachelbel" 6.050003 ";;; Edit a valid LAMBDA EXPRESSION for \"create pachelbel\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (gm)$$$;create pachelbel score$(setq pachScore (newGRelation gm 3))$$;voice 1$;bar 1 and 2$(setq tuV11 (newTuple gm '(78 1 1)))$(setq tuV12 (newTuple gm '(76 2 1)))$(setq tuV13 (newTuple gm '(74 3 1)))$(setq tuV14 (newTuple gm '(73 4 1)))$(setq tuV15 (newTuple gm '(71 5 1)))$(setq tuV16 (newTuple gm '(69 6 1)))$(setq tuV17 (newTuple gm '(71 7 1)))$(setq tuV18 (newTuple gm '(73 8 1)))$$;voice 2$;bar 1 and 2$(setq tuV21 (newTuple gm '(74 1 1)))$(setq tuV22 (newTuple gm '(73 2 1)))$(setq tuV23 (newTuple gm '(71 3 1)))$(setq tuV24 (newTuple gm '(69 4 1)))$(setq tuV25 (newTuple gm '(67 5 1)))$(setq tuV26 (newTuple gm '(66 6 1)))$(setq tuV27 (newTuple gm '(67 7 1)))$(setq tuV28 (newTuple gm '(64 8 1)))$$$$(GRelation-AddTuple gm pachScore tuV11)$(GRelation-AddTuple gm pachScore tuV12)$(GRelation-AddTuple gm pachScore tuV13)$(GRelation-AddTuple gm pachScore tuV14)$(GRelation-AddTuple gm pachScore tuV15)$(GRelation-AddTuple gm pachScore tuV16)$(GRelation-AddTuple gm pachScore tuV17)$(GRelation-AddTuple gm pachScore tuV18)$(GRelation-AddTuple gm pachScore tuV21)$(GRelation-AddTuple gm pachScore tuV22)$(GRelation-AddTuple gm pachScore tuV23)$(GRelation-AddTuple gm pachScore tuV24)$(GRelation-AddTuple gm pachScore tuV25)$(GRelation-AddTuple gm pachScore tuV26)$(GRelation-AddTuple gm pachScore tuV27)$(GRelation-AddTuple gm pachScore tuV28)$$;return$(setq pachScore pachScore)$$$)") (quote ((om-load-inputfun (quote input-funbox) "" "GM" nil))) (om-make-point 539 30) nil nil "&" "create pachelbel") (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 453 345) (om-make-point 35 30) 100 "100" nil) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 424 383) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 575 313) (om-make-point 35 30) 500 "500" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 524 364) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "create Gecode manager" (om-load-lisp-abspatch "create Gecode manager" 6.050003 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda () $$(print \"gm created\")$$(load \"/Users/saschavancauwelaert/Documents/EPL/PhD/code/GeLiSo_interface/GeLiSo/lispsources/load.lisp\")$$(setq endpoint_receive '(\"127.0.0.1\" 2222))$(setq endpoint_send '(\"127.0.0.1\" 3333))$		$;create the gecode manager and connect the sockets$(setq gm (make-instance 'GecodeManager :sender (createSocket (first endpoint_send) (second endpoint_send)) :receiver (createSocket (first endpoint_receive) (second endpoint_receive))))$$$)") (quote nil) (om-make-point 60 30) nil nil "&" "create Gecode manager") (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 713 296) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 513 305) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 355 311) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 487 473) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (6700) (6600) (6700) (6900) (6900) (7100) (7100) (7400) (7300) (7400) (7800) (7600) (7300) (6400) (7300))) :lonset (quote (1500 2500 3000 3500 3000 2000 3500 2500 500 1000 1500 500 1000 2000 4000 4000 4000)) :ldur (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.050003 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 1280 752) (om-make-point 0 0) 0 1 (quote t) nil 0)) nil nil nil nil) (om-load-boxcall (quote abstraction) "quit" (om-load-lisp-abspatch "quit" 6.050003 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (gm in)$$(print \"Start quit\")$;quit$(quitGecode gm)$$)") (quote ((om-load-inputfun (quote input-funbox) "" "GM" nil) (om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 525 640) nil nil nil "quit") (om-load-boxcall (quote abstraction) "get score param from rel" (om-load-lisp-abspatch "get score param from rel" 6.050003 ";;; Edit a valid LAMBDA EXPRESSION for \"get score param from rel\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (scoreRel)$$$$(setq scoreParam (getScoreParamFromSol scoreRel))$$)") (quote ((om-load-inputfun (quote input-funbox) "" "SCOREREL" nil))) (om-make-point 468 202) nil nil "&" "get score param from rel"))) (quote ((6 0 0 0 nil 0) (1 0 0 1 nil 0) (6 0 1 0 nil 0) (9 0 3 0 nil 0) (2 0 3 1 nil 0) (8 0 5 0 nil 0) (4 0 5 1 nil 0) (12 0 7 0 nil 0) (12 0 8 0 nil 0) (12 0 9 0 nil 0) (3 0 10 1 nil 0) (5 0 10 2 nil 0) (7 0 10 3 nil 0) (6 0 11 0 ((om-make-point 131 95) (om-make-point 131 289) (om-make-point 131 399) (om-make-point 536 640)) 0) (10 0 11 1 nil 0) (0 0 12 0 nil 0))) nil 6.050003))
