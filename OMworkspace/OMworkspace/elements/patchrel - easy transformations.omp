; OM File Header - Saved 2012/06/27 11:38:19
; (6.050003 :patc (om-make-point 10 10) (om-make-point 0 -778) (om-make-point 1280 752) "" 183 0 "2012/01/17 16:09:07" "2012/02/15 18:31:52")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "patchrel - easy transformations" (quote ((om-load-boxcall (quote bastype) "string" (quote string) (quote nil) (om-make-point 737 230) (om-make-point 456 30) "This patch transform a score by shifting the pitch and the onset parameters" "\"This patch transform a score by shifting the pitch and the onset parameters\"" nil) (om-load-boxcall (quote lispfun) "OM-RUN-PROCESS" (quote om-run-process) (quote ((om-load-inputfun (quote input-funbox) "NAME" "NAME" "/users/saschavancauwelaert/documents/epl/phd/code/geliso_interface/build/bin/gelisoexec") (om-load-inputfun (quote input-funbox) "FUNC" "FUNC" nil))) (om-make-point 1066 281) nil nil "&" nil 1) (om-load-boxcall (quote lispfun) "OM-CMD-LINE" (quote om-cmd-line) (quote ((om-load-inputfun (quote input-funbox) "STR" "STR" "/users/saschavancauwelaert/documents/epl/phd/code/geliso_interface/build/bin/gelisoexec") (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 930 410) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 845 21) (om-make-point 21 30) 4 "4" nil) (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 801 24) (om-make-point 28 30) 12 "12" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 276 560) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (6700) (6600) (6700) (6900) (6900) (7100) (7100) (7400) (7300) (7400) (7800) (7600) (7300) (6400) (7300))) :lonset (quote (1500 2500 3000 3500 3000 2000 3500 2500 500 1000 1500 500 1000 2000 4000 4000 4000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.050003 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 1280 752) (om-make-point 0 0) 0 1 (quote t) nil 0)) nil nil nil nil) (om-load-boxcall (quote lispfun) "LIST 4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 498 607) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "get sol rel 2" (om-load-lisp-abspatch "get sol rel" 6.050003 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (gm sol var) $$(if (string/= sol \"0\");if there is a solution$    ;then$    ;get a var from the solution space$    (progn$     (setq solRel (getVarInSpace gm sol var))$     (printSpace gm sol)$    )$    ;else$    (setq solRel nil)$)$$(print \"got the sol rel\")$$(setq solRel solRel)$)") (quote ((om-load-inputfun (quote input-funbox) "" "GM" nil) (om-load-inputfun (quote input-funbox) "" "SOL" nil) (om-load-inputfun (quote input-funbox) "" "VAR" nil))) (om-make-point 563 421) nil nil "&" "get sol rel") (om-load-boxcall (quote abstraction) "rel as score (without duration)" (om-load-patch-abs1 "rel as score (without duration)" (quote ((om-load-boxin "input" 0 (om-make-point 371 48) "" nil nil nil) (om-load-boxout "output" 0 (om-make-point 353 512) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote abstraction) "get score param from rel" (om-load-lisp-abspatch "get score param from rel" 6.050003 ";;; Edit a valid LAMBDA EXPRESSION for \"get score param from rel\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (scoreRel)$$$$(setq scoreParam (getScoreParamFromSol scoreRel))$$(print scoreParam)$$)") (quote ((om-load-inputfun (quote input-funbox) "" "SCOREREL" nil))) (om-make-point 317 136) nil nil "&" "get score param from rel") (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 326 376) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quotelonset (quote (500 500 500 500 1000 1000 1000 1000 1500 1500 1500 1500 500 500 500 500 500 500 500 500 1000 1000 1000 1000 1500 1500 1500 1500 1000 1000 1000 1000 1500 1500 1500 1500 2000 2000 2000 2000 2500 2500 2500 2500 3000 3000 3000 3000 3500 3500 3500 3500 2000 2000 2000 2000 2500 2500 2500 2500 3000 3000 3000 3000 3500 3500 3500 3500 2000 2000 2000 2000 2500 2500 2500 2500 3000 3000 3000 3000 3500 3500 3500 3500 500 500 500 500 1000 1000 1000 1000 1500 1500 1500 1500 2000 2000 2000 2000 2500 2500 2500 2500 3000 3000 3000 3000 3500 3500 3500 3500 4000 4000 4000 4000 4500 4500 4500 4500 5000 5000 5000 5000 4000 4000 4000 4000 4500 4500 4500 4500 4000 4000 4000 4000 4500 4500 4500 4500 5000 5000 5000 5000 5000 5000 5000 5000 4000 4000 4000 4000 4500 4500 4500 4500 5000 5000 5000 5000 500 500 500 500 500 500 500 500 1000 1000 1000 1000 1000 1000 1000 1000 1500 1500 1500 1500 1500 1500 1500 1500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 1000 1000 1000 1000 1000 1000 1000 1000 1500 1500 1500 1500 1500 1500 1500 1500 1000 1000 1000 1000 1000 1000 1000 1000 1500 1500 1500 1500 1500 1500 1500 1500 2000 2000 2000 2000 2000 2000 2000 2000 2500 2500 2500 2500 2500 2500 2500 2500 3000 3000 3000 3000 3000 3000 3000 3000 3500 3500 3500 3500 3500 3500 3500 3500 2000 2000 2000 2000 2000 2000 2000 2000 2500 2500 2500 2500 2500 2500 2500 2500 3000 3000 3000 3000 3000 3000 3000 3000 3500 3500 3500 3500 3500 3500 3500 3500 2000 2000 2000 2000 2000 2000 2000 2000 2500 2500 2500 2500 2500 2500 2500 2500 3000 3000 3000 3000 3000 3000 3000 3000 3500 3500 3500 3500 3500 3500 3500 3500 500 500 500 500 500 500 500 500 1000 1000 1000 1000 1000 1000 1000 1000 1500 1500 1500 1500 1500 1500 1500 1500 2000 2000 2000 2000 2000 2000 2000 2000 2500 2500 2500 2500 2500 2500 2500 2500 3000 3000 3000 3000 3000 3000 3000 3000 3500 3500 3500 3500 3500 3500 3500 3500 500 1000 1500 500 500 1000 1500 1000 1500 2000 2500 3000 3500 2000 2500 3000 3500 2000 2500 3000 3500 500 1000 1500 2000 2500 3000 3500 4000 4000 4000 4000 4000 4000 4000 4000 4500 4500 4500 4500 4500 4500 4500 4500 5000 5000 5000 5000 5000 5000 5000 5000 4000 4000 4000 4000 4000 4000 4000 4000 4500 4500 4500 4500 4500 4500 4500 4500 4000 4000 4000 4000 4000 4000 4000 4000 4500 4500 4500 4500 4500 4500 4500 4500 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 4000 4000 4000 4000 4000 4000 4000 4000 4500 4500 4500 4500 4500 4500 4500 4500 5000 5000 5000 5000 5000 5000 5000 5000 4000 4500 5000 4000 4500 4000 4500 5000 5000 4000 4500 5000 5500)) :ldur (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (2) (2) (2) (2) (3) (3) (3) (3) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (3) (3) (3) (3) (3) (3) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (3) (3) (3) (3) (3) (3) (2) (2) (2) (2) (3) (3) (3) (3) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (3) (3) (3) (3) (3) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (1) (1) (1) (2) (3) (2) (2) (3) (3) (1) (1) (1) (1) (2) (2) (2) (2) (3) (3) (3) (3) (4) (4) (4) (4) (4) (4) (4) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (3) (3) (3) (3) (3) (3) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (1) (1) (1) (2) (2) (3) (3) (2) (3) (4) (4) (4))) :lvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.050003 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 0 0) (om-make-point 1280 752) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 204 245) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 362 239) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 373 298) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 424 247) (om-make-point 35 30) 500 "500" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 273 317) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 302 279) (om-make-point 35 30) 100 "100" nil))) (quote ((3 0 1 0 nil 0) (0 0 2 0 nil 0) (8 0 3 1 nil 0) (6 0 3 2 nil 0) (2 0 4 0 nil 0) (2 0 5 0 nil 0) (5 0 6 0 nil 0) (7 0 6 1 nil 0) (4 0 8 0 nil 0) (9 0 8 1 nil 0))) 6.050003 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 572 493) nil nil "&" "rel as score (without duration)") (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 560 579) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7900) (7800) (7900) (7600) (8300) (8600) (8500) (8600) (9000) (8800) (8100) (8100) (8300) (8300) (8500) (8500))) :lonset (quote (4500 5000 5500 6000 3500 2500 3000 3500 2500 3000 5000 4000 5500 4500 4000 6000 8000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.050003 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 36 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 1280 752) (om-make-point 0 0) 0 1 (quote t) nil 0)) nil nil nil nil) (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 1) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 8))) (om-make-point 766 25) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 64) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 78))) (om-make-point 720 25) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "create pachelbel" (om-load-lisp-abspatch "create pachelbel" 6.050003 ";;; Edit a valid LAMBDA EXPRESSION for \"create pachelbel\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (gm)$$$;create pachelbel score$(setq pachScore (newGRelation gm 2))$$;voice 1$;bar 1 and 2$$#|(setq tuV11 (newTuple gm '(78 1 2)))$(setq tuV12 (newTuple gm '(76 2 2)))$(setq tuV13 (newTuple gm '(74 3 2)))$(setq tuV14 (newTuple gm '(73 4 2)))$(setq tuV15 (newTuple gm '(71 5 2)))$(setq tuV16 (newTuple gm '(69 6 2)))$(setq tuV17 (newTuple gm '(71 7 2)))$(setq tuV18 (newTuple gm '(73 8 2)))|#$$(setq tuV11 (newTuple gm '(78 1)))$(setq tuV12 (newTuple gm '(76 2)))$(setq tuV13 (newTuple gm '(74 3)))$(setq tuV14 (newTuple gm '(73 4)))$(setq tuV15 (newTuple gm '(71 5)))$(setq tuV16 (newTuple gm '(69 6)))$(setq tuV17 (newTuple gm '(71 7)))$(setq tuV18 (newTuple gm '(73 8)))$$;voice 2$;bar 1 and 2$#|(setq tuV21 (newTuple gm '(74 1 2)))$(setq tuV22 (newTuple gm '(73 2 2)))$(setq tuV23 (newTuple gm '(71 3 2)))$(setq tuV24 (newTuple gm '(69 4 2)))$(setq tuV25 (newTuple gm '(67 5 2)))$(setq tuV26 (newTuple gm '(66 6 2)))$(setq tuV27 (newTuple gm '(67 7 2)))$(setq tuV28 (newTuple gm '(64 8 2)))|#$$(setq tuV21 (newTuple gm '(74 1)))$(setq tuV22 (newTuple gm '(73 2)))$(setq tuV23 (newTuple gm '(71 3)))$(setq tuV24 (newTuple gm '(69 4)))$(setq tuV25 (newTuple gm '(67 5)))$(setq tuV26 (newTuple gm '(66 6)))$(setq tuV27 (newTuple gm '(67 7)))$(setq tuV28 (newTuple gm '(64 8)))$$$$$$(GRelation-AddTuple gm pachScore tuV11)$(GRelation-AddTuple gm pachScore tuV12)$(GRelation-AddTuple gm pachScore tuV13)$(GRelation-AddTuple gm pachScore tuV14)$(GRelation-AddTuple gm pachScore tuV15)$(GRelation-AddTuple gm pachScore tuV16)$(GRelation-AddTuple gm pachScore tuV17)$(GRelation-AddTuple gm pachScore tuV18)$(GRelation-AddTuple gm pachScore tuV21)$(GRelation-AddTuple gm pachScore tuV22)$(GRelation-AddTuple gm pachScore tuV23)$(GRelation-AddTuple gm pachScore tuV24)$(GRelation-AddTuple gm pachScore tuV25)$(GRelation-AddTuple gm pachScore tuV26)$(GRelation-AddTuple gm pachScore tuV27)$(GRelation-AddTuple gm pachScore tuV28)$$;return$(setq pachScore pachScore)$$$)") (quote ((om-load-inputfun (quote input-funbox) "" "GM" nil))) (om-make-point 470 8) nil nil "&" "create pachelbel") (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 649 372) nil nil "&" nil 1) (om-load-boxcall (quote abstraction) "branch rel 2" (om-load-lisp-abspatch "branch rel" 6.050003 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (gm sp var in) $$;branching$(branch gm sp var)$$$)") (quote ((om-load-inputfun (quote input-funbox) "" "GM" nil) (om-load-inputfun (quote input-funbox) "" "SP" nil) (om-load-inputfun (quote input-funbox) "" "VAR" nil) (om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 673 276) nil nil "&" "branch rel") (om-load-boxcall (quote abstraction) "create transform rel" (om-load-lisp-abspatch "create transform rel" 6.050003 ";;; Edit a valid LAMBDA EXPRESSION for \"create transform rel\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (gm sp pitchBounds onsetBounds pitchOffset onsetOffset) $$(setq lispTuples nil)$$(loop for tempPitch from (first pitchBounds) to (second pitchBounds) do$$      (loop for tempOnset from (first onsetBounds) to (second onsetBounds) do$            $            (print \"we push !\")$$         (push (list tempPitch tempOnset (+ tempPitch pitchOffset) (+ tempOnset onsetOffset)) lispTuples)$$      )$)$$$;gecode tuples$(setq gecTuples (createTupleUUIDListFromLispTupleList gm lispTuples))$$;ground relation$(setq gr (createGroundRelFromTupleUUIDList gm gecTuples))$$(print gr)$$;variable (actually is a ground relation)$(setq var (newCPRelVar gm sp gr gr))$$$)") (quote ((om-load-inputfun (quote input-funbox) "" "GM" nil) (om-load-inputfun (quote input-funbox) "" "SP" nil) (om-load-inputfun (quote input-funbox) "" "PITCHBOUNDS" (list (quote list) 1 8)) (om-load-inputfun (quote input-funbox) "" "ONSETBOUNDS" (list (quote list) 1 1)) (om-load-inputfun (quote input-funbox) "" "PITCHOFFSET" nil) (om-load-inputfun (quote input-funbox) "" "ONSETOFFSET" nil))) (om-make-point 706 81) nil nil "&" "create transform rel") (om-load-boxcall (quote abstraction) "rel as score (with duration)" (om-load-patch-abs1 "rel as score (with duration)" (quote ((om-load-boxin "input" 0 (om-make-point 371 48) "" nil nil nil) (om-load-boxout "output" 0 (om-make-point 353 512) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote abstraction) "get score param from rel" (om-load-lisp-abspatch "get score param from rel" 6.050003 ";;; Edit a valid LAMBDA EXPRESSION for \"get score param from rel\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (scoreRel)$$$$(setq scoreParam (getScoreParamFromSol scoreRel))$$)") (quote ((om-load-inputfun (quote input-funbox) "" "SCOREREL" nil))) (om-make-point 317 136) nil nil "&" "get score param from rel") (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 415 385) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quotelonset (quote (500 500 500 500 1000 1000 1000 1000 1500 1500 1500 1500 500 500 500 500 500 500 500 500 1000 1000 1000 1000 1500 1500 1500 1500 1000 1000 1000 1000 1500 1500 1500 1500 2000 2000 2000 2000 2500 2500 2500 2500 3000 3000 3000 3000 3500 3500 3500 3500 2000 2000 2000 2000 2500 2500 2500 2500 3000 3000 3000 3000 3500 3500 3500 3500 2000 2000 2000 2000 2500 2500 2500 2500 3000 3000 3000 3000 3500 3500 3500 3500 500 500 500 500 1000 1000 1000 1000 1500 1500 1500 1500 2000 2000 2000 2000 2500 2500 2500 2500 3000 3000 3000 3000 3500 3500 3500 3500 4000 4000 4000 4000 4500 4500 4500 4500 5000 5000 5000 5000 4000 4000 4000 4000 4500 4500 4500 4500 4000 4000 4000 4000 4500 4500 4500 4500 5000 5000 5000 5000 5000 5000 5000 5000 4000 4000 4000 4000 4500 4500 4500 4500 5000 5000 5000 5000 500 500 500 500 500 500 500 500 1000 1000 1000 1000 1000 1000 1000 1000 1500 1500 1500 1500 1500 1500 1500 1500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 1000 1000 1000 1000 1000 1000 1000 1000 1500 1500 1500 1500 1500 1500 1500 1500 1000 1000 1000 1000 1000 1000 1000 1000 1500 1500 1500 1500 1500 1500 1500 1500 2000 2000 2000 2000 2000 2000 2000 2000 2500 2500 2500 2500 2500 2500 2500 2500 3000 3000 3000 3000 3000 3000 3000 3000 3500 3500 3500 3500 3500 3500 3500 3500 2000 2000 2000 2000 2000 2000 2000 2000 2500 2500 2500 2500 2500 2500 2500 2500 3000 3000 3000 3000 3000 3000 3000 3000 3500 3500 3500 3500 3500 3500 3500 3500 2000 2000 2000 2000 2000 2000 2000 2000 2500 2500 2500 2500 2500 2500 2500 2500 3000 3000 3000 3000 3000 3000 3000 3000 3500 3500 3500 3500 3500 3500 3500 3500 500 500 500 500 500 500 500 500 1000 1000 1000 1000 1000 1000 1000 1000 1500 1500 1500 1500 1500 1500 1500 1500 2000 2000 2000 2000 2000 2000 2000 2000 2500 2500 2500 2500 2500 2500 2500 2500 3000 3000 3000 3000 3000 3000 3000 3000 3500 3500 3500 3500 3500 3500 3500 3500 500 1000 1500 500 500 1000 1500 1000 1500 2000 2500 3000 3500 2000 2500 3000 3500 2000 2500 3000 3500 500 1000 1500 2000 2500 3000 3500 4000 4000 4000 4000 4000 4000 4000 4000 4500 4500 4500 4500 4500 4500 4500 4500 5000 5000 5000 5000 5000 5000 5000 5000 4000 4000 4000 4000 4000 4000 4000 4000 4500 4500 4500 4500 4500 4500 4500 4500 4000 4000 4000 4000 4000 4000 4000 4000 4500 4500 4500 4500 4500 4500 4500 4500 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 4000 4000 4000 4000 4000 4000 4000 4000 4500 4500 4500 4500 4500 4500 4500 4500 5000 5000 5000 5000 5000 5000 5000 5000 4000 4500 5000 4000 4500 4000 4500 5000 5000 4000 4500 5000 5500)) :ldur (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (2) (2) (2) (2) (3) (3) (3) (3) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (3) (3) (3) (3) (3) (3) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (3) (3) (3) (3) (3) (3) (2) (2) (2) (2) (3) (3) (3) (3) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (3) (3) (3) (3) (3) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (1) (1) (1) (2) (3) (2) (2) (3) (3) (1) (1) (1) (1) (2) (2) (2) (2) (3) (3) (3) (3) (4) (4) (4) (4) (4) (4) (4) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (3) (3) (3) (3) (3) (3) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (1) (1) (1) (2) (2) (3) (3) (2) (3) (4) (4) (4))) :lvel (quoteloffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.050003 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 0 0) (om-make-point 1280 752) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 204 245) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 362 239) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 373 298) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 424 247) (om-make-point 35 30) 500 "500" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 273 317) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 302 279) (om-make-point 35 30) 100 "100" nil))) (quote ((3 0 1 0 nil 0) (0 0 2 0 nil 0) (8 0 3 1 nil 0) (6 0 3 2 nil 0) (2 0 4 0 nil 0) (2 0 5 0 nil 0) (5 0 6 0 nil 0) (7 0 6 1 nil 0) (4 0 8 0 nil 0) (9 0 8 1 nil 0))) 6.050003 nil "" (om-make-point 0 0) (om-make-point 1280 752)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 280 481) nil nil "&" "rel as score (with duration)") (om-load-boxcall (quote abstraction) "get next sol" (om-load-lisp-abspatch "get next sol" 6.050003 ";;; Edit a valid LAMBDA EXPRESSION for \"get next sol\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (gm sp se) $$;get a solution$(setq sol1 (nextSolution gm sp se))$$(print \"Found the solution (if 0 no solution) : \")$$(print sol1)$$(setq sol1 sol1)$$)") (quote ((om-load-inputfun (quote input-funbox) "" "GM" nil) (om-load-inputfun (quote input-funbox) "" "SP" nil) (om-load-inputfun (quote input-funbox) "" "SE" nil))) (om-make-point 270 331) nil nil "&" "get next sol") (om-load-boxcall (quote abstraction) "get sol rel" (om-load-lisp-abspatch "get sol rel" 6.050003 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (gm sol var) $$(if (string/= sol \"0\");if there is a solution$    ;then$    ;get a var from the solution space$    (progn$     (setq solRel (getVarInSpace gm sol var))$     (printSpace gm sol)$    )$    ;else$    (setq solRel nil)$)$$(print \"got the sol rel\")$$(setq solRel solRel)$)") (quote ((om-load-inputfun (quote input-funbox) "" "GM" nil) (om-load-inputfun (quote input-funbox) "" "SOL" nil) (om-load-inputfun (quote input-funbox) "" "VAR" nil))) (om-make-point 271 409) nil nil "&" "get sol rel") (om-load-boxcall (quote abstraction) "branch rel" (om-load-lisp-abspatch "branch rel" 6.050003 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (gm sp var in) $$;branching$(branch gm sp var)$$$)") (quote ((om-load-inputfun (quote input-funbox) "" "GM" nil) (om-load-inputfun (quote input-funbox) "" "SP" nil) (om-load-inputfun (quote input-funbox) "" "VAR" nil) (om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 594 279) nil nil "&" "branch rel") (om-load-boxcall (quote abstraction) "search engine" (om-load-lisp-abspatch "search engine" 6.050003 ";;; Edit a valid LAMBDA EXPRESSION for \"search engine\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (gm sp in) $$;search engine dfs$(setq se (newSearchEngine gm sp 0))$$(printSpace gm sp)$$(print \"search engine constructed\")$$(setq se se)$$)") (quote ((om-load-inputfun (quote input-funbox) "" "GM" nil) (om-load-inputfun (quote input-funbox) "" "SP" nil) (om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 262 250) nil nil "&" "search engine") (om-load-boxcall (quote abstraction) "create space" (om-load-lisp-abspatch "create space" 6.050003 ";;; Edit a valid LAMBDA EXPRESSION for \"create space\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (gm) $$;space$(setq sp (newSpace gm))$$)$") (quote ((om-load-inputfun (quote input-funbox) "" "GM" nil))) (om-make-point 26 176) nil nil "&" "create space") (om-load-boxcall (quote abstraction) "create set of chords" (om-load-lisp-abspatch "create set of chords" 6.050003 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (gm) $  $  ;ground relation representing the set of chords : {<pitch, index>}$  (setq chordSet (newGRelation gm 2))$$  ;chordA (C major non reversed)$  (setq tuA1 (newTuple gm '(60 1)))$  (setq tuA2 (newTuple gm '(64 1)))$  (setq tuA3 (newTuple gm '(67 1)))$$  ;chordB (F major non reversed)$  (setq tuB1 (newTuple gm '(65 2)))$  (setq tuB2 (newTuple gm '(69 2)))$  (setq tuB3 (newTuple gm '(72 2)))$$  ;chordA (G major non reversed)$  (setq tuC1 (newTuple gm '(67 3)))$  (setq tuC2 (newTuple gm '(71 3)))$  (setq tuC3 (newTuple gm '(74 3)))$$  ;Add the tuples to the relation$  (GRelation-AddTuple gm tuA1)$  (GRelation-AddTuple gm tuA2)$  (GRelation-AddTuple gm tuA3)$  $  (GRelation-AddTuple gm tuB1)$  (GRelation-AddTuple gm tuB2)$  (GRelation-AddTuple gm tuB3)$$  (GRelation-AddTuple gm tuC1)$  (GRelation-AddTuple gm tuC2)$  (GRelation-AddTuple gm tuC3)$  $  ;return the ground rel$  (setq chordSet chordSet)$$)") (quote ((om-load-inputfun (quote input-funbox) "" "GM" nil))) (om-make-point 989 112) nil nil "&" "create set of chords") (om-load-boxcall (quote abstraction) "transform rel" (om-load-lisp-abspatch "transform rel" 6.050003 ";;; Edit a valid LAMBDA EXPRESSION for \"constraints application\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (gm sp relScore Transform) $$  ;do the transformation$  (setq glbJoined (newGRelation gm 4))$  $  (setq lubAndTuplesJoined (createBoundedFullGroundRelation gm '((64 78) (1 12) (76 90) (5 17) )))$$$  (print \"joined ok !\")$$  (setq joinedRel (newCPRelVar gm sp glbJoined (first lubAndTuplesJoined)))$$  ;impose the join constraint$  (joinConstraint gm sp relScore 2 Transform joinedRel)$  $$  ;get the information we want (transformed score)$$  (setq glbProj (newGRelation gm 2))$  $  (setq lubAndTuplesProj (createBoundedFullGroundRelation gm '((76 90) (5 17) ))) $$  (print \"proj ok !\")$$  (setq projRel (newCPRelVar gm sp glbProj (first lubAndTuplesProj)))$  $  (printSpace gm sp)$$  (projectionConstraint gm sp 2 joinedRel projRel)$$  (branch gm sp joinedRel)$$  (branch gm sp projRel)$$  (setq projRel projRel)$$  ;permutated relation$$  ;(setq lubAndTuplesPerm (createBoundedFullGroundRelation gm '((64 78) (1 11) (1 2) (1 8))))$$  ;(setq permutRel (newCPRelVar gm sp glbJoined (first lubAndTuplesPerm)))$$  ;permDesc$  ;(setq permDesc '((2 0)))$$  ;impose the permutation constraint$  ;(permutationConstraint gm sp joinedRel permutRel permDesc)$$$  $)$") (quote ((om-load-inputfun (quote input-funbox) "" "GM" nil) (om-load-inputfun (quote input-funbox) "" "SP" nil) (om-load-inputfun (quote input-funbox) "" "RELSCORE" nil) (om-load-inputfun (quote input-funbox) "" "TRANSFORM" nil))) (om-make-point 575 144) nil nil "&" "transform rel") (om-load-boxcall (quote abstraction) "create Gecode manager" (om-load-lisp-abspatch "create Gecode manager" 6.050003 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (in) $$(print \"gm created\")$$(load \"/Users/saschavancauwelaert/Documents/EPL/PhD/code/GeLiSo_interface/GeLiSo/lispsources/load.lisp\")$$(setq endpoint_receive '(\"127.0.0.1\" 2222))$(setq endpoint_send '(\"127.0.0.1\" 3333))$		$;create the gecode manager and connect the sockets$(setq gm (make-instance 'GecodeManager :sender (createSocket (first endpoint_send) (second endpoint_send)) :receiver (createSocket (first endpoint_receive) (second endpoint_receive))))$$$)") (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 85 113) nil nil "&" "create Gecode manager") (om-load-boxcall (quote abstraction) "quit" (om-load-lisp-abspatch "quit" 6.050003 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (gm in)$$(print \"Start quit\")$;quit$(quitGecode gm)$$)") (quote ((om-load-inputfun (quote input-funbox) "" "GM" nil) (om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 505 676) nil nil nil "quit") (om-load-boxcall (quote abstraction) "create score rel" (om-load-lisp-abspatch "create score rel" 6.050003 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (gm sp grPachelbel)$$;ground relations$;(setq glb (newGRelation gm 3))$;(setq lubAndTuple (createBoundedFullGroundRelation gm '((1 1) (1 1) (1 1)))) ;((60 72) (1 12) (1 4))$$;(setq lub (first lubAndTuple))$$(print \"score rel done !\")$$;variable$(setq var (newCPRelVar gm sp grPachelbel grPachelbel))$$)") (quote ((om-load-inputfun (quote input-funbox) "" "GM" nil) (om-load-inputfun (quote input-funbox) "" "SP" nil) (om-load-inputfun (quote input-funbox) "" "GRPACHELBEL" nil))) (om-make-point 484 77) nil nil "&" "create score rel"))) (quote ((16 0 5 0 nil 0) (5 0 6 0 nil 0) (9 0 6 1 nil 0) (24 0 7 0 nil 0) (17 0 7 1 nil 0) (23 0 7 2 nil 0) (7 0 8 0 nil 0) (8 0 9 0 nil 0) (24 0 12 0 nil 0) (19 0 13 0 nil 0) (14 0 13 1 nil 0) (24 0 14 0 nil 0) (21 0 14 1 nil 0) (15 0 14 2 nil 0) (23 0 14 3 nil 0) (24 0 15 0 nil 0) (21 0 15 1 nil 0) (11 0 15 2 nil 0) (10 0 15 3 nil 0) (4 0 15 4 nil 0) (3 0 15 5 nil 0) (18 0 16 0 nil 0) (24 0 17 0 nil 0) (21 0 17 1 nil 0) (20 0 17 2 nil 0) (24 0 18 0 nil 0) (17 0 18 1 nil 0) (26 0 18 2 nil 0) (24 0 19 0 nil 0) (21 0 19 1 nil 0) (26 0 19 2 nil 0) (23 0 19 3 nil 0) (24 0 20 0 nil 0) (21 0 20 1 nil 0) (13 0 20 2 nil 0) (24 0 21 0 nil 0) (24 0 23 0 nil 0) (21 0 23 1 nil 0) (26 0 23 2 nil 0) (15 0 23 3 nil 0) (24 0 25 0 ((om-make-point 156 178) (om-make-point 131 289) (om-make-point 131 399) (om-make-point 516 676)) 0) (6 0 25 1 nil 0) (24 0 26 0 nil 0) (21 0 26 1 nil 0) (12 0 26 2 nil 0))) nil 6.050003))
